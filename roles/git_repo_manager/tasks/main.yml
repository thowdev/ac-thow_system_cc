---
# tasks file for git_repo_manager
################################################################################
#-------------------------------------------------------------------------------
- name: Install git on {{ distro }}
  block:
    - name: 'Install git on "Darwin" based OS'
      community.general.homebrew:
        name: git
        state: latest
      when: ansible_os_family == "Darwin"
      tags: git_installation
    - name: 'Install git on "Linux" based OS'
      ansible.builtin.package:
        name: git
        state: latest
      when: ansible_os_family != "Darwin"
      tags: git_installation

  rescue:
    - name: "Failure: Install git on {{ distro }}"
      ansible.builtin.debug:
        msg: |
          Failed to install git.
          Please check, if the system is supported and package manager is
          available.
#-------------------------------------------------------------------------------
- name: Check git directory structure
  block:
    - name: Assert "git_base_dir" is defined and stop playbook if not
      ansible.builtin.assert:
        that:
          - git_base_dir is defined
        fail_msg: "Variable 'git_base_dir' is not defined."

    - name: Display "git_base_dir" status
      debug:
        msg: "Variable 'git_base_dir' is defined with value: {{ git_base_dir }}"
      when: git_base_dir is defined

    - name: Print gathered directories
      ansible.builtin.debug:
        msg: 'Gathered directory: "{{ item.key }} : {{ item.value }}"'
      loop: "{{ git_dirs | dict2items }}"

    - name: Ensure directories exist
      ansible.builtin.file:
        path: "{{ item.value }}"
        state: directory
        mode: '0750'
      loop: "{{ git_dirs | dict2items }}"
      register: dir_check

    - name: Print directory check results
      ansible.builtin.debug:
        msg: "{{ item.item.values() | first }} {{ 'created or modified' if item.changed
              else 'already exists' }}."
      loop: "{{ dir_check.results }}"
      loop_control:
        label: "{{ item.item.values() | first }}"
      when: item is changed or item.changed == false

  rescue:
    - name: "Failure: Check git directory structure"
      ansible.builtin.debug:
        msg: |
          git directory structure not available or has failures.
          Please check, git directory structure under {{ git_base_dir }}
#-------------------------------------------------------------------------------
- name: Clone git repositories
  block:
    - name: Clone or pull-rebase git repositories
      ansible.builtin.git:
        repo: "{{ item.repo }}"
        clone: '{{ item.clone | default(true) }}'
        dest: "{{ item.dest }}"
        version: "{{ item.version | default('main') }}"
        verify_commit: "{{ item.verify_commit | default(false) }}"
        update: yes
        force: no
      loop: "{{ git_repositories }}"
      #no_log: true
  tags: git_cloning

  rescue:
    - name: "Failure: Clone git repositories"
      ansible.builtin.debug:
        msg: |
          Cloning git repositories failed.
          Please check, git directory structure under {{ git_base_dir }}
#-------------------------------------------------------------------------------
